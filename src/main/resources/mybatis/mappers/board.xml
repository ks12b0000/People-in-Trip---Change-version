<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.board">
	<resultMap type="boardDTO" id="boardResult">
		<result property="post_num" column="post_num" />
		<result property="id" column="id" />
		<result property="post_title" column="post_title" />
		<result property="post_content" column="post_content" />
		<result property="post_date" column="post_date" />
		<result property="visitcount" column="visitcount" />
		<result property="count_comment" column="count_comment" />
	</resultMap>

	<resultMap type="imageDTO" id="imgResult">
		<result property="imageFileNO" column="imageFileNO" />
		<result property="imageFileName" column="imageFileName" />
		<result property="post_num" column="post_num" />

	</resultMap>

	<!-- 조회수 -->
	<update id="visitcount">
		UPDATE
		P_BOARD
		SET
		VISITCOUNT = visitcount + 1
		WHERE
		POST_NUM = #{post_num}
	</update>

	<!-- 조회수 -->
	<update id="visitcount1">
		UPDATE
		P_BOARD1
		SET
		VISITCOUNT = visitcount + 1
		WHERE
		POST_NUM = #{post_num}
	</update>

	<!-- 페이징 검색 -->
	<select id="listfind" resultType="boardDTO"
		parameterType="kr.co.intrip.board.dto.Criteria">
		select POST_NUM, POST_TITLE, POST_CONTENT, ID, POST_DATE,
		VISITCOUNT,likehit,sinhit
		from (
		select POST_NUM, POST_TITLE,
		POST_CONTENT, ID,
		POST_DATE,likehit,sinhit,
		VISITCOUNT,
		row_number()
		over(order by POST_NUM desc)
		as rNum
		from
		P_BOARD
		<include refid="search"></include>
		) mb
		where rNum between #{rowStart} and #{rowEnd}
		order by POST_NUM desc
	</select>

	<!-- 페이징 검색1 -->
	<select id="listfind1" resultType="boardDTO"
		parameterType="kr.co.intrip.board.dto.Criteria">
		select POST_NUM, POST_TITLE, POST_CONTENT, ID, POST_DATE,
		VISITCOUNT,likehit,sinhit
		from (
		select POST_NUM, POST_TITLE,
		POST_CONTENT, ID,
		POST_DATE,likehit,sinhit,
		VISITCOUNT,
		row_number()
		over(order by POST_NUM desc)
		as rNum
		from
		P_BOARD1
		<include refid="search"></include>
		) mb
		where rNum between #{rowStart} and #{rowEnd}
		order by POST_NUM desc
	</select>

	<!--검색어 갯수 --> <!-- include가 기능을 못함 -->
	<select id="findlistCount" resultType="int" >
	SELECT count(*)
	FROM P_BOARD
	<include refid="search"></include>	
	</select>

	<!--검색어 갯수 -->
	<select id="findlistCount1" resultType="int">
		SELECT count(*)
		FROM P_BOARD1
		<include refid="search1"></include>	
	</select>
	
	<!-- 검색 -->
	<sql id="search">
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">where post_title like CONCAT('%',#{keyword},'%')</if>
			<if test="searchType == 'c'.toString()">where POST_CONTENT LIKE CONCAT('%',#{keyword},'%')</if>
			<if test="searchType == 'w'.toString()">where ID LIKE CONCAT('%',#{keyword},'%')</if>
		</if>
	</sql>
	
	<!-- 검색 -->
	<sql id="search1">
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">where post_title like CONCAT('%',#{keyword},'%')</if>
			<if test="searchType == 'c'.toString()">where POST_CONTENT LIKE CONCAT('%',#{keyword},'%')</if>
			<if test="searchType == 'w'.toString()">where ID LIKE CONCAT('%',#{keyword},'%')</if>
		</if>
	</sql>

	<!-- 상세보기 -->
	<select id="selectBoard" parameterType="java.lang.Integer"
		resultType="boardDTO">
      <![CDATA[
         SELECT * FROM P_BOARD
         WHERE POST_NUM = #{post_num}   
      ]]>
	</select>

	<!-- 상세보기 -->
	<select id="selectBoard1" parameterType="java.lang.Integer"
		resultType="boardDTO">
      <![CDATA[
         SELECT * FROM P_BOARD1
         WHERE POST_NUM = #{post_num}   
      ]]>
	</select>

	<!-- 게시물 등록 -->
	<insert id="insertBoard" parameterType="java.util.Map">
   <![CDATA[
      INSERT INTO P_BOARD
      (POST_NUM, ID, POST_TITLE, POST_CONTENT)
      VALUES(#{post_num}, #{id}, #{post_title}, #{post_content})
   ]]>
	</insert>
	
	<!-- 게시물 등록1 -->
	<insert id="insertBoard1" parameterType="java.util.Map">
   <![CDATA[
      INSERT INTO P_BOARD1
      (POST_NUM, ID, POST_TITLE, POST_CONTENT)
      VALUES(#{post_num}, #{id}, #{post_title}, #{post_content})
   ]]>
	</insert>

	<!-- 추가하는 새글에 대한 글번호 가져옴 -->
	<select id="selectNewpost_num" resultType="int">   
      <![CDATA[    
         SELECT IFNULL(MAX(post_num),0) + 1 FROM P_BOARD
      ]]>
	</select>

	<!-- 추가하는 새글에 대한 글번호 가져옴 -->
	<select id="selectNewpost_num1" resultType="int">   
      <![CDATA[    
         SELECT IFNULL(MAX(post_num),0) + 1 FROM P_BOARD1
      ]]>
	</select>

	<select id="selectNewImageFileNO" resultType="int">
      <![CDATA[   
         SELECT IFNULL(MAX(imageFileNO),0) FROM P_imageFile
      ]]>
	</select>

	<select id="selectNewImageFileNO1" resultType="int">
      <![CDATA[   
         SELECT IFNULL(MAX(imageFileNO),0) FROM P_imageFile1
      ]]>
	</select>

	<select id="selectImageFileList" resultMap="imgResult"
		parameterType="int">
      <![CDATA[
         SELECT * FROM P_imageFile
         WHERE POST_NUM = #{post_num}
         ORDER BY IMAGEFILENO      
      ]]>
	</select>

	<select id="selectImageFileList1" resultMap="imgResult"
		parameterType="int">
      <![CDATA[
         SELECT * FROM P_imageFile1
         WHERE POST_NUM = #{post_num}
         ORDER BY IMAGEFILENO      
      ]]>
	</select>

	<!-- 한꺼번에 여러 개의 레코드 추가 -->
	<insert id="insertNewImage" parameterType="java.util.Map">
			INSERT INTO P_imageFile(imageFileNO, imageFileName,post_num)
			VALUES
		<foreach item="item" index="index" collection="list" separator=",">
			(#{item.imageFileNO},#{item.imageFileName},#{item.post_num})
		</foreach>
	</insert>

	<!-- 한꺼번에 여러 개의 레코드 추가 -->
	<insert id="insertNewImage1" parameterType="java.util.Map">
			INSERT INTO P_imageFile1(imageFileNO, imageFileName,post_num)
			VALUES
		<foreach item="item" index="index" collection="list" separator=",">
			(#{item.imageFileNO},#{item.imageFileName},#{item.post_num})
		</foreach>
	</insert>

	<select id="selectpost_num" resultType="boardDTO"
		parameterType="int">
      <![CDATA[
         SELECT * FROM P_BOARD
         WHERE POST_NUM = #{post_num}   
      ]]>
	</select>

	<select id="selectpost_num1" resultType="boardDTO"
		parameterType="int">
      <![CDATA[
         SELECT * FROM P_BOARD1
         WHERE POST_NUM = #{post_num}   
      ]]>
	</select>

	<!-- 게시글 수정 -->
	<update id="updateBoard" parameterType="java.util.Map">
		<![CDATA[
			UPDATE P_BOARD 
				SET POST_TITLE = #{post_title}
					,POST_CONTENT = #{post_content}
				WHERE POST_NUM = #{post_num}		
		]]>
	</update>

	<!-- 게시글 수정 -->
	<update id="updateBoard1" parameterType="java.util.Map">
		<![CDATA[
			UPDATE P_BOARD1 
				SET POST_TITLE = #{post_title}
					,POST_CONTENT = #{post_content}
				WHERE POST_NUM = #{post_num}		
		]]>
	</update>

	<update id="updateImageFile" parameterType="java.util.List">
		<foreach collection="list" separator="," item="item"> 
			<choose>
				<when test="item.imageFileName != null">
					UPDATE P_imageFile
					SET IMAGEFILENAME =
					#{item.imageFileName}
					WHERE
					POST_NUM = #{item.post_num}
					AND
					IMAGEFILENO = #{item.imageFileNO}
				</when>
				<otherwise></otherwise>
			</choose>
		</foreach>
	</update>

	<update id="updateImageFile1" parameterType="java.util.List">
		<foreach collection="list" separator="," item="item"> 
			<choose>
				<when test="item.imageFileName != null">
					UPDATE P_imageFile1
					SET IMAGEFILENAME =
					#{item.imageFileName}
					WHERE
					POST_NUM = #{item.post_num}
					AND
					IMAGEFILENO = #{item.imageFileNO}
				</when>
				<otherwise></otherwise>
			</choose>
		</foreach>
	</update>

	<!-- 이미지 추가 -->
	<insert id="insertModNewImage" parameterType="java.util.Map">
			INSERT INTO P_imageFile(imageFileNO, imageFileName,
			post_num)
			VALUES
		<foreach item="item" index="index" collection="list" separator=",">
			(#{item.imageFileNO},#{item.imageFileName},#{item.post_num})
		</foreach>
	</insert>

	<!-- 이미지 추가 -->
	<insert id="insertModNewImage1" parameterType="java.util.Map">
			INSERT INTO P_imageFile1(imageFileNO, imageFileName,
			post_num)
			VALUES
		<foreach item="item" index="index" collection="list" separator=",">
			(#{item.imageFileNO},#{item.imageFileName},#{item.post_num})
		</foreach>
	</insert>

	<!-- 글삭제 -->
	<delete id="deleteBoard" parameterType="int">
		<![CDATA[
			DELETE FROM P_BOARD
			WHERE POST_NUM	= #{post_num}
		]]>
	</delete>

	<!-- 글삭제1 -->
	<delete id="deleteBoard1" parameterType="int">
		<![CDATA[
			DELETE FROM P_BOARD1
			WHERE POST_NUM	= #{post_num}
		]]>
	</delete>

	<!-- 이미지 삭제 -->
	<delete id="deleteModImage" parameterType="imageDTO">
		DELETE FROM
		P_imageFile
		WHERE POST_NUM = #{post_num}
		AND IMAGEFILENO =
		#{imageFileNO}
	</delete>

	<!-- 이미지 삭제 -->
	<delete id="deleteModImage1" parameterType="imageDTO">
		DELETE FROM
		P_imageFile1
		WHERE POST_NUM = #{post_num}
		AND IMAGEFILENO =
		#{imageFileNO}
	</delete>

	<!-- 게시글 추천수 -->
	<update id="updateLike" parameterType="int">
		update p_board set
		LIKEHIT
		= LIKEHIT+1
		where POST_NUM = #{POST_NUM}
	</update>

	<!-- 게시글 추천수취소 -->
	<update id="updateLikeCancel" parameterType="int">
		update p_board set
		LIKEHIT = LIKEHIT - 1
		where POST_NUM = #{POST_NUM}
	</update>

	<!-- 게시글 추천 시 Like 테이블에 insert -->
	<insert id="insertLike" parameterType="java.util.Map">
		insert into l_board(LIKENO
		, POST_NUM , id)
		values((SELECT IFNULL(MAX(likeno), 0) + 1 FROM l_board b)
		,#{post_num} ,#{id})
	</insert>

	<!-- 게시글 추천취소 시 delete -->
	<delete id="deleteLike">
		delete from l_board where post_num = #{post_num} and
		id = #{id}
	</delete>

	<!-- 게시글 추천 시 Check를 1로 만들어서 중복방지 -->
	<update id="updateLikeCheck">
		update l_board set LIKECHECK = 1
		where post_num =
		#{post_num} and id = #{id}
	</update>

	<!-- 게시글 추천취소 시 다시 0 -->
	<update id="updateLikeCheckCancel">
		update l_board set LIKECHECK = 0
		where post_num =
		#{post_num} and id = #{id}
	</update>

	<!-- 게시글 추천 중복방지 select문 -->
	<select id="likeCheck" resultType="int">
		select count(*) from l_board
		where post_num = #{post_num} and id = #{id}
	</select>

	<!-- 추천1 -->
	<!-- 게시글 추천수 -->
	<update id="updateLike1" parameterType="int">
		update p_board1 set
		LIKEHIT = LIKEHIT+1
		where POST_NUM = #{POST_NUM}
	</update>

	<!-- 게시글 추천수취소 -->
	<update id="updateLikeCancel1" parameterType="int">
		update p_board1 set
		LIKEHIT = LIKEHIT - 1
		where POST_NUM = #{POST_NUM}
	</update>

	<!-- 게시글 추천 시 Like 테이블에 insert -->
	<insert id="insertLike1" parameterType="java.util.Map">
		insert into
		l_board1(LIKENO1 , POST_NUM , id)
		values((SELECT IFNULL(MAX(likeno1), 0) +
		1 FROM l_board1 b) ,#{post_num} ,#{id})
	</insert>

	<!-- 게시글 추천취소 시 delete -->
	<delete id="deleteLike1">
		delete from l_board1 where post_num = #{post_num} and
		id = #{id}
	</delete>

	<!-- 게시글 추천 시 Check를 1로 만들어서 중복방지 -->
	<update id="updateLikeCheck1">
		update l_board1 set LIKECHECK = 1
		where post_num =
		#{post_num} and id = #{id}
	</update>

	<!-- 게시글 추천취소 시 다시 0 -->
	<update id="updateLikeCheckCancel1">
		update l_board1 set LIKECHECK = 0
		where post_num =
		#{post_num} and id = #{id}
	</update>

	<!-- 게시글 추천 중복방지 select문 -->
	<select id="likeCheck1" resultType="int">
		select count(*) from l_board1
		where post_num = #{post_num} and id = #{id}
	</select>

	<!-- 신고 -->
	<!-- 신고수 -->
	<update id="updatesin" parameterType="int">
		update p_board set
		SINHIT =
		SINHIT+1
		where POST_NUM = #{POST_NUM}
	</update>

	<!-- 신고취소 -->
	<update id="updatesinCancel" parameterType="int">
		update p_board set
		SINHIT = SINHIT - 1
		where POST_NUM = #{POST_NUM}
	</update>

	<!-- 신고시 신고 테이블에 insert -->
	<insert id="insertsin" parameterType="java.util.Map">
		insert into s_board(SNO ,
		POST_NUM , id)
		values((SELECT IFNULL(MAX(SNO), 0) + 1 FROM s_board b)
		,#{post_num} ,#{id})
	</insert>

	<!-- 신고 취소 시 delete -->
	<delete id="deletesin">
		delete from s_board where post_num = #{post_num} and
		id = #{id}
	</delete>

	<!-- 신고시 Check를 1로 만들어서 중복방지 -->
	<update id="updatesinCheck">
		update s_board set SCHECK = 1
		where post_num =
		#{post_num} and id = #{id}
	</update>

	<!-- 신고시 다시 0 -->
	<update id="updatesinCheckCancel">
		update s_board set SCHECK = 0
		where post_num =
		#{post_num} and id = #{id}
	</update>

	<!-- 신고 중복방지 select문 -->
	<select id="sinCheck" resultType="int">
		select count(*) from s_board
		where post_num = #{post_num} and id = #{id}
	</select>

	<!-- 신고1 -->
	<update id="updatesin1" parameterType="int">
		update p_board1 set
		SINHIT
		= SINHIT+1
		where POST_NUM = #{POST_NUM}
	</update>

	<!-- 신고취소 -->
	<update id="updatesinCancel1" parameterType="int">
		update p_board1 set
		SINHIT = SINHIT - 1
		where POST_NUM = #{POST_NUM}
	</update>

	<!-- 신고시 신고 테이블에 insert -->
	<insert id="insertsin1" parameterType="java.util.Map">
		insert into s_board1(SNO ,
		POST_NUM , id)
		values((SELECT IFNULL(MAX(SNO), 0) + 1 FROM s_board1 b)
		,#{post_num} ,#{id})
	</insert>

	<!-- 신고 취소 시 delete -->
	<delete id="deletesin1">
		delete from s_board1 where post_num = #{post_num} and
		id = #{id}
	</delete>

	<!-- 신고시 Check를 1로 만들어서 중복방지 -->
	<update id="updatesinCheck1">
		update s_board1 set SCHECK = 1
		where post_num =
		#{post_num} and id = #{id}
	</update>

	<!-- 신고시 다시 0 -->
	<update id="updatesinCheckCancel1">
		update s_board1 set SCHECK = 0
		where post_num =
		#{post_num} and id = #{id}
	</update>

	<!-- 신고 중복방지 select문 -->
	<select id="sinCheck1" resultType="int">
		select count(*) from s_board1
		where post_num = #{post_num} and id = #{id}
	</select>

	<!-- 댓글 총 개수 -->
	<select id="boardCommentgetTotalRowCount"
		parameterType="kr.co.intrip.board.dto.CommentPagingDTO"
		resultType="int">
      <![CDATA[
         SELECT count(*)
         FROM P_BOARD_COMMENT
         WHERE post_num = #{post_num}
      ]]>
	</select>

	<!-- 댓글 조회 -->
	<select id="boardCommentselect"
		resultType="kr.co.intrip.board.dto.boardCommentDTO"
		parameterType="kr.co.intrip.board.dto.CommentPagingDTO">
         <![CDATA[
            select *
             from (
           select pt.*, row_number() over(order by com_date desc) as rNum
           from P_BOARD_COMMENT pt
           where post_num = #{post_num}
           ) mb
             where rNum between #{firstRow} and #{lastRow}
         ]]>
	</select>

	<!-- 댓글 작성 -->
	<insert id="boardWriteReply">
		insert into P_BOARD_COMMENT(COM_NUM, ID, post_num, COM_CONTENT)
		values( #{com_num}, #{id}, #{post_num}, #{com_content})
	</insert>

	<!-- 댓글 수 증가 -->
	<update id="boardcommentcount">
      <![CDATA[
         UPDATE P_BOARD
         SET commentcount = commentcount + 1 
         WHERE post_num = #{post_num}
      ]]>
	</update>

	<!-- 댓글 수 감소 -->
	<update id="boardcommentcountminus">
      <![CDATA[
         UPDATE P_BOARD
         SET commentcount = commentcount - 1 
         WHERE post_num = #{post_num}
      ]]>
	</update>

	<!-- 댓글 수정 -->
	<update id="boardupdateReply"
		parameterType="kr.co.intrip.board.dto.boardCommentDTO">
      <![CDATA[
            update P_BOARD_COMMENT 
            set COM_CONTENT = #{com_content}
            where com_num = #{com_num}
         ]]>
	</update>

	<!--댓글 삭제 -->
	<delete id="boarddeleteReply"
		parameterType="kr.co.intrip.board.dto.boardCommentDTO">
      <![CDATA[
            delete
            from P_BOARD_COMMENT 
            where com_num = #{com_num}
      ]]>
	</delete>

	<!-- 선택된 댓글 조회 -->
	<select id="boardselectReply"
		resultType="kr.co.intrip.board.dto.boardCommentDTO">
      <![CDATA[
         select *
         from P_BOARD_COMMENT
         where com_num = #{com_num}
      ]]>
	</select>

	<!-- 댓글2 -->
	<!-- 댓글 총 개수 -->
	<select id="boardCommentgetTotalRowCount2"
		parameterType="kr.co.intrip.board.dto.CommentPagingDTO"
		resultType="int">
      <![CDATA[
         SELECT count(*)
         FROM P_BOARD_COMMENT2
         WHERE post_num = #{post_num}
      ]]>
	</select>

	<!-- 댓글 조회 -->
	<select id="boardCommentselect2"
		resultType="kr.co.intrip.board.dto.boardCommentDTO"
		parameterType="kr.co.intrip.board.dto.CommentPagingDTO">
         <![CDATA[
            select *
             from (
           select pt.*, row_number() over(order by com_date desc) as rNum
           from P_BOARD_COMMENT2 pt
           where post_num = #{post_num}
           ) mb
             where rNum between #{firstRow} and #{lastRow}
         ]]>
	</select>

	<!-- 댓글 작성 -->
	<insert id="boardWriteReply2">
		insert into P_BOARD_COMMENT2(COM_NUM, ID, post_num, COM_CONTENT)
		values( #{com_num}, #{id}, #{post_num}, #{com_content})
	</insert>

	<!-- 댓글 수 증가 -->
	<update id="boardcommentcount2">
      <![CDATA[
         UPDATE P_BOARD1
         SET commentcount = commentcount + 1 
         WHERE post_num = #{post_num}
      ]]>
	</update>

	<!-- 댓글 수 감소 -->
	<update id="boardcommentcountminus2">
      <![CDATA[
         UPDATE P_BOARD1
         SET commentcount = commentcount - 1 
         WHERE post_num = #{post_num}
      ]]>
	</update>

	<!-- 댓글 수정 -->
	<update id="boardupdateReply2"
		parameterType="kr.co.intrip.board.dto.boardCommentDTO">
      <![CDATA[
            update P_BOARD_COMMENT2 
            set COM_CONTENT = #{com_content}
            where com_num = #{com_num}
         ]]>
	</update>

	<!-- 댓글 삭제 -->
	<delete id="boarddeleteReply2"
		parameterType="kr.co.intrip.board.dto.boardCommentDTO">
      <![CDATA[
            delete
            from P_BOARD_COMMENT2 
            where com_num = #{com_num}
      ]]>
	</delete>

	<!-- 선택된 댓글 조회 -->
	<select id="boardselectReply2"
		resultType="kr.co.intrip.board.dto.boardCommentDTO">
      <![CDATA[
         select *
         from P_BOARD_COMMENT2
         where com_num = #{com_num}
      ]]>
	</select>


	<!-- 관리자 페이지 -->
	<select id="listfindmaster" resultType="boardDTO"
		parameterType="kr.co.intrip.board.dto.Criteria">
		select POST_NUM, POST_TITLE, POST_CONTENT, ID,
		POST_DATE,
		VISITCOUNT,likehit,sinhit
		from (
		select POST_NUM, POST_TITLE,
		POST_CONTENT, ID,
		POST_DATE,likehit,sinhit,
		VISITCOUNT,
		row_number()
		over(order by POST_NUM desc)
		as rNum
		from
		P_BOARD
		where sinhit>=3
		) mb
		where rNum between #{rowStart} and #{rowEnd}
		order by POST_NUM desc
	</select>


	<!-- 관리자 페이지1 -->
	<select id="listfindmaster1" resultType="boardDTO"
		parameterType="kr.co.intrip.board.dto.Criteria">
		select POST_NUM, POST_TITLE, POST_CONTENT, ID,
		POST_DATE,
		VISITCOUNT,likehit,sinhit
		from (
		select POST_NUM, POST_TITLE,
		POST_CONTENT, ID,
		POST_DATE,likehit,sinhit,
		VISITCOUNT,
		row_number()
		over(order by POST_NUM desc)
		as rNum
		from
		P_BOARD1
		where sinhit>=3
		) mb
		where rNum between #{rowStart} and #{rowEnd}
		order by POST_NUM desc
	</select>

	<!--관리자 신고 갯수 -->
	<select id="findlistCountmaster" resultType="int"
		parameterType="kr.co.intrip.board.dto.Criteria">
		select count(post_num)
		from p_board	
		where post_num > 0 AND SINHIT >=3
	</select>

	<!--관리자 신고 갯수 -->
	<select id="findlistCountmaster1" resultType="int"
		parameterType="kr.co.intrip.board.dto.Criteria">
		select count(post_num)
		from p_board1	
		where post_num > 0 AND SINHIT >=3
	</select>
	
	
</mapper>